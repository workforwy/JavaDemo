package oper;

public class OperDemo6 {
    public static void main(String[] args) {
        byte a1 = 8, a2 = 4;
        // a1=00001000; (最高位为符号位)
        // a2=00000100;
        int a3 = a1 & a2;// 位与(两者都为1结果为1)
        // a3=00000000 00000000 000000000 00000000
        System.out.println("a3=" + a3);
        int a4 = a1 | a2;// 位或(只要有一个1结果则为1)
        // a1=00001000; (最高位为符号位)
        // a2=00000100;
        System.out.println("a4=" + a4);

        int a5 = ~a1;// 位非(取反)
        // a1=00001000; (最高位为符号位,0表示正数)

        // a1=11110111 (负数在计算机中会以补码形式表示)

        // 补码=原码取反(符号位不取反)+1
        // a1=10000000 00000000 00000000 00001001
        System.out.println("a5=" + a5);

        byte a6 = 10, a7 = -9;// 负数在计算机中以补码形式表示
        // a6=00001010
        // a7=10001001;
        // 1)a7=11110111 补码
        // 2)a6=00001010 原码
        // 3)a8=11111101 1),2)进行异或运算得负数
        // 4)a8=10000011在上一步的基础上取反+1

        int a8 = a6 ^ a7;// 异或(相同为0，不同为1)
        System.out.println("a8=" + a8);

    }
}
